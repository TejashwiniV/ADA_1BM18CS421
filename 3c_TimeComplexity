/*During Week-2, you have implemented Selection Sort and Bubble Sort. Now, for a given input you should check which sorting Algorithm 
 takes minimum number of element comparisons. You should modify the programs of Selection, Bubble Sort and Merge Sort to print the 
 total number of array element Comparisons.*/
 
#include <iostream>
#include <time.h>
using namespace std;
int count=0;
int selction_sort(int[],int);
void bubble_sort(int[],int);
void merge_sort(int[],int,int);
void merge(int a[],int low,int mid,int high);
int main()
{
	int a[10],n,i;
	double time;
	clock_t start,end;
	start=clock();
	cout<<"Enter the size of an array\n";
	cin>>n;
	cout<<"Enter the elements of an array\n";
	for(i=0;i<n;i++)
	{
		cin>>a[i];
	}
	selction_sort(a,n);
	bubble_sort(a,n);
	merge_sort(a,0,n-1);
	cout<<"Number of comparisons in merge sort "<<count<<endl;
	cout<<"Sorted elements\n";
	for(i=0;i<n;i++)
	{
		cout<<a[i]<<" ";
	}
	end=clock();
	time=(double)(end-start)/CLOCKS_PER_SEC;
	cout<<"\nTime complexity "<<time<<" secs\n";
}
int selction_sort(int a[],int n)
{
	int i,j,min,temp,count=0;
	for(i=0;i<n;i++)
	{
		min=i;
		for(j=i+1;j<n;j++)
		{
			if(a[j]<a[min])
				min=j;
				count++;
		}
		temp=a[i];
		a[i]=a[min];
		a[min]=temp;
	}
	cout<<"Number of comparisons in selection sort "<<count<<endl;
}
void bubble_sort(int a[],int n)
{
	int i,j,count=0;
	for(i=0;i<n;i++)
	{
		for(j=0;j<n-i-1;j++)
			{
				count++;
				if(a[j]>a[j+1])
				{
					int temp = a[j];
					a[j]=a[j+1];
					a[j+1]=temp;
				}
			}
	}
	cout<<"Number of comparisons in bubble sort "<<count<<endl;
}
void merge_sort(int a[],int low,int high)
{
	int mid;
	if(low>=high)
		return;
	mid=(low+high)/2;
	merge_sort(a,low,mid);
	merge_sort(a,mid+1,high);
	merge(a,low,mid,high);
}
void merge(int a[],int low,int mid,int high)
{
	int i,j,k,b[10],count=0;
	i=low;
	j=mid+1;
	k=low;
	while(i<=mid && j<=high)
	{
		count++;
		if(a[i]<=a[j])
			b[k++]=a[i++];
		else
			b[k++]=a[j++];
	}
	while(i<=mid)
		b[k++]=a[i++];
	while(j<=high)
		b[k++]=a[j++];
	for(k=low;k<=high;k++)
		a[k]=b[k];
}
